/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Example
 * The cats API description
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

import type {
  CreateTodoDto,
  DeleteTodoDto,
  GetTodoDto,
  UpdateTodoDto
} from './model';

export type appControllerGetHelloResponse200 = {
  data: void
  status: 200
}
    
export type appControllerGetHelloResponseComposite = appControllerGetHelloResponse200;
    
export type appControllerGetHelloResponse = appControllerGetHelloResponseComposite & {
  headers: Headers;
}

export const getAppControllerGetHelloUrl = () => {


  

  return `http://localhost:4000/api`
}

export const appControllerGetHello = async ( options?: RequestInit): Promise<appControllerGetHelloResponse> => {
  
  const res = await fetch(getAppControllerGetHelloUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: appControllerGetHelloResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as appControllerGetHelloResponse
}



export type todoControllerGetTodoResponse200 = {
  data: GetTodoDto[]
  status: 200
}
    
export type todoControllerGetTodoResponseComposite = todoControllerGetTodoResponse200;
    
export type todoControllerGetTodoResponse = todoControllerGetTodoResponseComposite & {
  headers: Headers;
}

export const getTodoControllerGetTodoUrl = () => {


  

  return `http://localhost:4000/api/todo`
}

export const todoControllerGetTodo = async ( options?: RequestInit): Promise<todoControllerGetTodoResponse> => {
  
  const res = await fetch(getTodoControllerGetTodoUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: todoControllerGetTodoResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as todoControllerGetTodoResponse
}



export type todoControllerPostTodoResponse200 = {
  data: CreateTodoDto
  status: 200
}
    
export type todoControllerPostTodoResponseComposite = todoControllerPostTodoResponse200;
    
export type todoControllerPostTodoResponse = todoControllerPostTodoResponseComposite & {
  headers: Headers;
}

export const getTodoControllerPostTodoUrl = () => {


  

  return `http://localhost:4000/api/todo`
}

export const todoControllerPostTodo = async (createTodoDto: CreateTodoDto, options?: RequestInit): Promise<todoControllerPostTodoResponse> => {
  
  const res = await fetch(getTodoControllerPostTodoUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createTodoDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: todoControllerPostTodoResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as todoControllerPostTodoResponse
}



export type todoControllerPutTodoResponse200 = {
  data: UpdateTodoDto
  status: 200
}
    
export type todoControllerPutTodoResponseComposite = todoControllerPutTodoResponse200;
    
export type todoControllerPutTodoResponse = todoControllerPutTodoResponseComposite & {
  headers: Headers;
}

export const getTodoControllerPutTodoUrl = () => {


  

  return `http://localhost:4000/api/todo`
}

export const todoControllerPutTodo = async (updateTodoDto: UpdateTodoDto, options?: RequestInit): Promise<todoControllerPutTodoResponse> => {
  
  const res = await fetch(getTodoControllerPutTodoUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateTodoDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: todoControllerPutTodoResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as todoControllerPutTodoResponse
}



export type todoControllerDeleteTodoResponse200 = {
  data: DeleteTodoDto
  status: 200
}
    
export type todoControllerDeleteTodoResponseComposite = todoControllerDeleteTodoResponse200;
    
export type todoControllerDeleteTodoResponse = todoControllerDeleteTodoResponseComposite & {
  headers: Headers;
}

export const getTodoControllerDeleteTodoUrl = () => {


  

  return `http://localhost:4000/api/todo`
}

export const todoControllerDeleteTodo = async (deleteTodoDto: DeleteTodoDto, options?: RequestInit): Promise<todoControllerDeleteTodoResponse> => {
  
  const res = await fetch(getTodoControllerDeleteTodoUrl(),
  {      
    ...options,
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      deleteTodoDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: todoControllerDeleteTodoResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as todoControllerDeleteTodoResponse
}


export const getTodoControllerGetTodoResponseMock = (): GetTodoDto[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.string.alpha(20), complete: faker.datatype.boolean(), title: faker.string.alpha(20), comment: faker.string.alpha(20), createdAt: `${faker.date.past().toISOString().split('.')[0]}Z`, updatedAt: `${faker.date.past().toISOString().split('.')[0]}Z`})))

export const getTodoControllerPostTodoResponseMock = (overrideResponse: Partial< CreateTodoDto > = {}): CreateTodoDto => ({title: faker.string.alpha(20), comment: faker.string.alpha(20), ...overrideResponse})

export const getTodoControllerPutTodoResponseMock = (overrideResponse: Partial< UpdateTodoDto > = {}): UpdateTodoDto => ({id: faker.string.alpha(20), title: faker.string.alpha(20), comment: faker.string.alpha(20), complete: faker.datatype.boolean(), ...overrideResponse})

export const getTodoControllerDeleteTodoResponseMock = (overrideResponse: Partial< DeleteTodoDto > = {}): DeleteTodoDto => ({id: faker.string.alpha(20), ...overrideResponse})


export const getAppControllerGetHelloMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/api', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getTodoControllerGetTodoMockHandler = (overrideResponse?: GetTodoDto[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetTodoDto[]> | GetTodoDto[])) => {
  return http.get('*/api/todo', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getTodoControllerGetTodoResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getTodoControllerPostTodoMockHandler = (overrideResponse?: CreateTodoDto | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CreateTodoDto> | CreateTodoDto)) => {
  return http.post('*/api/todo', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getTodoControllerPostTodoResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getTodoControllerPutTodoMockHandler = (overrideResponse?: UpdateTodoDto | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<UpdateTodoDto> | UpdateTodoDto)) => {
  return http.put('*/api/todo', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getTodoControllerPutTodoResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getTodoControllerDeleteTodoMockHandler = (overrideResponse?: DeleteTodoDto | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<DeleteTodoDto> | DeleteTodoDto)) => {
  return http.delete('*/api/todo', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getTodoControllerDeleteTodoResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getExampleMock = () => [
  getAppControllerGetHelloMockHandler(),
  getTodoControllerGetTodoMockHandler(),
  getTodoControllerPostTodoMockHandler(),
  getTodoControllerPutTodoMockHandler(),
  getTodoControllerDeleteTodoMockHandler()
]
